객체지향 프로그래밍1
1. 객체와 객체 지향 프로그래밍
- 객체란?
- Object - 사물, 대상
    - 객체를 정의하는 속성, 상태 : 변수
    - 객체가 하는 행위 : 함수(O)
      - 객체간 상호작용 (협동, 의존 ...)

    개념적인 객체
	회원
	상품
	주문

      자동차 - 객체
	  - 속성 : 엔진, 연료 .., 연료양, 속도계 ..
	  - 행위 : 움직인다.

2. 클래스 살펴보기
  - 객체를 만들기 위한 설계도
  - 객체가 되면 있을 속성, 행위 정의


1) 클래스를 정의하는 문법
class 클래스명 {
   변수 정의 : 멤버 변수 정의
    함수 정의 : 멤버 메서드 정의
}

new 연산자 : 객체를 만드는 연산

마침표 연산자(.) : 객체 안에 변수, 메서드 접근 사용

객체에서 생성된 자원 -> 힙 메모리 생성

2) 클래스 이름을 짓는 규칙
   단어의 첫 글자가 모두 애문자 형태 - 파스칼 표기법
   

3) 클래스의 속성을 구현하는 멤버변수
   - 변수 정의


3. 클래스와 인스턴스
   - 인스턴스(instance - 실체)
     - 실제로 존재한다(클래스 정의 -> 실제 메모리에 생성)


4. 메서드
1) 함수란?
    - 하나의 기능을 수행하는 일련의 코드

2) 함수 정의하기

  접근 제어자 반환값타입 함수명 (매개변수, ...) {
     // 수행할 코드 ..

       return 반환값
  } 


   반환값타입이 없는 경우 void


3) 함수 호출과 스택 메모리
   이름(값, ...); -> 실행

   참고)
     변수 : 공간(메모리)의 이름

   연산에 필요한 메모리 : 스택 메모리에서 할당 : 실행될때

   참고)
       스택(Stack) 자료구조
	- 마지막에 추가한 자료 -> 가장 먼저 꺼낼 수 있는 구조
	- 처음에 추가한 자료 -> 가장 마지막에 꺼낼 수 있는 구조

       큐(Queue) 자료구조
	- 처음에 추가한 자료 -> 처음에 꺼낼 수 있고
	- 마지막에 추가한 자료 -> 마지막에 꺼낼 수 있는 구조
	- 선착순, 대기줄

   스택 메모리
    - 함수 전용 메모리
    - 함수가 연산을 수행할 때만 필요한 메모리(임시 메모리)
    - 함수가 호출 될때만 정의된 변수에 공간을 할당
	- 함수가 실행 될때만 유효한 변수 : 지역 변수


4. 자바의 이름 짓기 규약

5. 클래스와 인스턴스
6. 프로그램을 시작하는 main()함수

7. new 예약어로 클래스 생성하기

7. 인스턴스와 참조 변수
  - 클래스 형 자료형 - 참조 변수
	- 객체의 주소값만 가지고 있다. 참조해서 실제 객체(힙 메모리)의 자원을 접근
	- 4byte

8. 인스턴스와 힙 메모리
   인스턴스 - 생성된 객체
   힙메모리 - 객체 전용 메모리



--------------------------------------------------------------------------------------------


생성자
- 클래스를 생성할 때 사용하는 함수
- 클래스명과 동일한 함수
- 데이터 영역 메모리 (코드 && 상수 영역)
   - class -> 클래스 로더 -> 데이터 영역 코드 영역에 구성, Class 객체를 생성 - 클래스의 정보가 담겨있는 객체
   - 모든 클래스의 class 정적 변수, Object 클래스의 getClass() 접근 가능

1. 디폴트 생성자
   - 생성자를 정의 X -> 객체를 만드려면 반드시 필요한 메서드
   - 컴파일러 자동 추가
      public 클래스명() {}

2. 생성자 만들기
3. 생성자 오버로드

   참고)
     메서드 오버로드
	함수(메서드) 시그니처 : 패키지명.클래스명.반환값.함수명.매개변수.예외전가
		- 시그니처가 같으면 함수 중복 정의(오류)
		- 시그니처가 다르면 다른 함수 정의

정보 은닉
- 멤버 변수에 값을 직접 대입 -> 지양 : 통제가 불가 하기 때문
- 값을 지정하는 별도 메서드 정의 -> 외부 접근 가능한 접근 범위
- 값을 조회하는 별도 메서드 정의 -> 외부 접근 가능한 접근 범위

  통제 불가능한 부분 - 감추기
  통제 가능한 수단

     - 캡슐화
       (변화 - 감추고, 확장 -> 열기 - 전략 패턴)

1. 접근제어자 정리
  public : 외부 패키지에서 접근 가능
  protected : 동일 패키지에서만 접근 가능, 상속을 통하면 외부 패키지에서도 클래스 내부에서 접근 가능 (default + private)
  default : 접근제어자를 정의 X : 동일 패키지에서만 접근 가능
  private : 클래스 내부에서만 접근 가능


  public > protected > default > private

   참고)
      다른 패키지의 클래스를 접근 하실때는
	import 패키지명.클래스명;

2. get(), set() 메서드
  관례적으로 get멤버변수명() 
	     set멤버변수명(...)
	   - setter, getter


  참고)
      String toString() 메서드
	- 참조 변수를 출력 -> 클래스 안에 정의된 toString 메서드가 자동 호출
	    -> 관례적으로 멤버 변수의 값을 출력하는 용도로 많이 사용

this 예약어
   지역 변수
      - 모든 인스턴스 메서드의 지역 변수
      - 생성된 객체의 주소 : 클래스 내부에서만 사용 가능  
      - 인스턴스 자원을 접근하기 위해서 사용
      - this는 출처가 명확할때는 생략 가능

  메서드
    - 생성자 메서드를 클래스 내부에서 호출 : 주로 생성자 안에서 정의
      - this(...);

static 변수
   - static : 정적인
   - 데이터 영역에서 공간을 할당 받는 변수


   정적인 메모리 : 데이터 영역 메모리

   동적인 메모리 : 스택 영역 메모리, 힙 영역 메모리

변수의 유효범위
1. 지역변수
2. 멤버변수(인스턴스 변수)
3. static 변수