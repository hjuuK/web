개발환경 구축

tomcat10버전
	- jakarta ee 10 : jakarta.
	
tomcat9
	- java ee8 : javax.
	
	
클래스 패스 : 클래스를 인식할 수 있는 경로
src/main/java : 자바코드
src/main/resources : 정적 자원 - 설정 파일 (xml, properties) 주로 인식
														- css, js, 템플릿 파일, 이미지

src/test/java : 테스트용 자바 코드
src/test/resources : 테스트용 정적 자원

src/main/webapp : 기본 웹 경로	/		웹 자원으로 노출
src/main/webapp/WEB-INF : 설정 
								- web.xml : 웹 배치 설정 - 서블릿, 필터
							- 웹 자원으로 노출 X
							- classes
							- lib

메이븐 프로젝트
	classes -> target
	lib -> src/main/resources
	
	
웹 기초
1. 요청과 응답 이해하기
	요청(request) : 브라우저(클라이언트)
	응답(response) : 서버(server)
	
	
	요청 전문
		헤더(header)
			- 요청 쪽에 대한 정보
			- 요청 방식(method - GET, POST)
			- 요청 주소
			- 요청 IP
			- 브라우저 언어 설정
			- 브라우저 종류(User-Agent)
			- 요청 데이터의 형식
				content-type:
						- content-type: application/x-www-form-urlencoded;
														application/json;
			
		바디(body)
			POST 방식으로 데이터를 전송
			
			application/x-www-form-urlencoded;
			subject=%EC%A0%9C%EB%AA%A9&content=%EB%82%B4%EC%9A%A9
			
			application/json;
			{ "subject" : "제목", "content" : "내용 }
			
	응답 전문
		헤더(header)
			- 응답 바디의 데이터 종류
			- content-type : text/html
						-> 브라우저가 바디 데이터를 해석하기 위한 정보
			
			- 응답 상태 코드
					2xx
						200 : 정상 응답 (브라우저 -> 서버 -> 응답)
						201 : 작성됨 (POST) - 서버에 기록을 완료
					3xx
						301 : 영구 이동
						302 : 임시 이동
						304 : 캐시됨 : 동일한 주소로 되어 있는 파일 -> 임시로 저장, 서버에 요청 -> 일정시간 경과 후 상제 다시 요청
					4xx : 클라이언트 오류
						400 : 잘못된 요청(Bad Request)
						401 : 접속 권한 없음(Unauthorized)
						403 : 금지됨(forbidden)
						404 : 페이지 없음(Not Found)
						405 : Method Not Allowed - GET, POST, DELETE, PUT, PATCH
					5xx : 서버쪽 오류
						500 : 소스 코드의 오류
						501 : Bad Gateway
						503 : 서비스를 이용할 수 없음
		
			- 응답 서버쪽 정보
		
			서버쪽에서 브라우저 전달하는 명령
			- cache-control
			- Location: 주소 : 서버에서 -> 브라우저에게 주소를 이동
			- refresh : 초 - 초마다 새로고침
			- Set-Cookie : 키=값; 키=값; : 브라우저에게 쿠키값을 저장해달라고 명령
			- Content-disposition: attachment; filename=... : 바디 출력 흐름을 파일로 변경 - 파일 다운로드
		
		바디(body)
			서버 응답 데이터
		
2. HTTP (HyperText Transfer Protocol)
	html 문서를 전송, 수신 프로토콜
	
	참고)
		ftp (File Transfer Protocol)

3. 헤더(header)
4. HTTP 상태 코드
5. HTTP 요청 메서드
	GET - 서버 자원 조회
		
		https://news.naver.com
		/main/main.naver
		
		?
		mode=LSD
		&
		mid=shm
		&
		sid1=105
		
		질의(query)
		
		쿼리 스트링 : 주소에 조회용 데이터가 있다.
		-> 요청 body는 비어 있는 상태로 전송
		
		참고)
			DELETE
	
	
	POST : 작성하다 - 서버에 자원 기록
		- 요청 헤더에 content-type 정의

		- 요청 데이터가 요청 body에 기록
			ex) content-type: application/x-www-form-urlencoded
			subject=%EC%A0%9C%EB%AA%A9&content=%EB%82%B4%EC%9A%A9
			
			application/json;
			{ "subject" : "제목", "content" : "내용 }
			
		참고)
			PUT : 데이터 치환
			PATCH : 데이터의 부분 치환
		
			OPTIONS			

서블릿(Servlet)
1. 서블릿(Servlet)의 개요
	- 자바의 웹 기술
	
	jakarta ee 10 : jakarta.
	
	java ee8 : javax.
	
2. 서블릿(Servlet) 클래스 작성하기
	jakarta.servlet 패키지
	jakarta.servlet.http 패키지
		HttpServlet 클래스(추상 클래스)
		
	servlet-api
	
	
	API(Application Programming Interface) : 애플리케이션 개발에 필요한 설계틀
	
	
	HttpServletRequest : 요청 관련 정보 + 기능
	
	HttpServletResponse : 응답 관련 기능 + 헤더 정의
	
	
	servlet 6.0 : 기본 인코딩 UTF-8
	
	servlet 4.0 : 기본 인코딩 CPC949 - EUC-KR / 2바이트 한글
	

3. web.xml 파일에 서블릿(Servlet) 등록하기
	<web-app>
		<servlet>
			<servlet-name>서블릿 이름</servlet-name>
			<servlet-class></servlet-class>
			<init-param>
				<param-name>설정이름<param-name>
				<param-value>설정값</param-value>
			</init-param>
		</servlet>
		<servlet-mapping>
			<servlet-name>서블릿 이름</servlet-name>
			<url-pattern>요청 URL</url-pattern>
		</servlet-mapping>
	</web-app>

4. XML 문법의 기초
	<?xml version="1.0" encoding="..."?>

5. 웹 브라우저로부터 데이터 입력 받기
	HttpServletRequest
		String getParameter(String name) : 요청 데이터를 조회
			GET - 쿼리스트링의 각각의 값
			POST - body 데이터
			
서블릿 3.0
@WebServlet("주소");

요청이 들어오면 쓰레드가 생성
-> 멀티 쓰레드 방식으로 서블릿 객체를 접근
-> 동시성 문제 발생할 수 있다.
-> 인스턴스 변수 정의를 지양

6. init메서드와 destroy 메서드

서블릿 객체 생성
init() 호출 - 한번만 호출

매 요청시 각 요청 메서드가 호출
doGet(...), doPost(...) ...

객체 소멸 전
destroy() 호출 - 한번만 호출