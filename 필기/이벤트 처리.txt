DOMparser : 문자열 -> HTML DOM 변경

setTimeout(function() {
	// 5초 뒤 실행되는 코드
}, 5000); 

이벤트 처리
1. 이벤트 처리기를 등록하는 방법
	- document 객체에 on으로 시작하는 속성
		on 이벤트명 : 이벤트 처리기
		
2. 이벤트 처리기의 문제점
	- 속성에 이벤트 핸들러 객체의 값을 대입하는 형태
	- 또 대입되면 기존 이벤트 핸들러가 동작 X

3. 이벤트 리스너를 등록하고 삭제하는 방법
	document
		.addEventListener("이벤트명", 이벤트 핸들러 함수);

이벤트 객체
1. 이벤트 객체의 공통 프로퍼티
	- 이벤트 핸들러의 첫번째 매개변수 객체 : 이벤트 객체
	- 이벤트가 발생한 정보
	- 메서드, 속성
	
		요소 안에서의 좌표
			offsetX
			offsetY
		
		보이는 화면(Viewport)의 좌표
			clientX
			clientY
		
		문서 전체에서의 좌표
			pageX
			pageY
	
	
		target : 이벤트를 발생 시킨 요소
		currentTarget : 이벤트 핸들러가 바인딩 되어 있는 요소 (this와 동일)


2. 마우스 이벤트 객체

3.키보드 이벤트 객체
1. 키보드 관련된 이벤트가 가진 고유의 프로퍼티


4. 기타
	focus() : 입력 항목에 커서가 깜빡
	blur() : 입력 항목에서 커서가 사라지면
	change() : 선택 변경 - select, input[type='number|range|color|file']

이벤트 전파
	document
			.addEventListener("이벤트명", 이벤트 핸들러, useCapture);
			useCapture : false - 이벤트 전파는 버블링 단계 발생(기본값)
								 : true - 이벤트 전파가 캡쳐링 단계 발생
								 
1. 캡쳐링 단계
	-> 타겟을 찾기 위해서 DOM Tree -> 내려오는 단계
	-> useCapture가 true이면 캡쳐링 단계에서 이벤트가 전파

2. 타깃 단계
	-> 이벤트가 발생한 요소를 찾은 단계
	-> 이벤트가 실행
	
3. 버블링 단계
	-> 위로 올라가는 단계
	-> useCapture가 false 이면 이벤트가 전파
	
4. 이벤트 전파 취소하기
	-> 이벤트 전파의 특성으로 기능의 오작동이 발생할 가능성
	-> 이벤트 객체
			.stopPropagation() : 이벤트 전파 취소 메서드
			
5. 기본 동작 취소하기
	- 태그에 있는 기본 동작을 취소
	-> 이벤트 객체
					.preventDefault();

이벤트 리스너 안의 this
	= e.currentTarget 동일 : 이벤트가 바인딩 되어 있는 요소
	
2. this가 원하는 객체를 가리키도록 설정하는 방법

Function.prototype
	.bind(thisArg, [...]) : call, apply와 다르게 호출 X, this 범위와 매개변수만 변경