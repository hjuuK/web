JSTL
1. 설치하기


JSTL(Jsp Standard Tag Library)
- 커스텀 태그
- 외부 라이브러리
- JSTL API
- JSTL Implemetation

2. 코어(core) 라이브러리
	- 제어구문, 속성값, 반복문
	- <%@ taglib prefix="c" uri="jakarta.tags.core" %>
1) <c:set>
	: EL 변수, 속성 값을 추가
	- var : 변수명
	- value : 값
	- scope : page(기본값)|request|session|application
	
	참고)
	1. PageContext pageContext
	2. HttpServletRequest request
	3. HttpSession session
	4. ServletContext application
		- setAttribute
		- getAttribute
		- removeAttribute
		
2) <c:remove>
	: EL 속성에서 제거
	- var : 제거될 EL 속성명 / 모든 범위(page,request,session,application)의 속성이 제거된다.
	- scope : page, request, session, application - 특정 범위의 속성값만 제거할때
	 
3) <c:if>
	: 조건문
	- test : EL 조건
				 : ture, false는 문구로 입력해도 인식
	
4) <c:choose>
	: 다중 조건
	
	<c:choose>
		<c:when test="조건1">
			...
		</c:when>
		<c:when test="조건2">
			...
		</c:when>
		<c:when test="조건3">
			...
		</c:when>
		...
		<c:otherwise>
			모든 조건이 거짓일때 출력되는 영역
		</c:otherwise>
	</c:choose>

5) <c:forEach>
	- begin : 시작번호
	- end : 종료번호
	- step : 증감 단위 - 기본값은 1
	- var : 변수 : 카운트 변수
	
	- <c:forEach> 액션의 items 애트리뷰트를 이용해서 처리할 수 있는 데이터
	
	- items : 배열, 콜렉션(Collection - List, Set), Iterator, Enumeration, 콤마(,)로 구분된 문자열
						var : 변수 - 요소 하나하나
	- varStatus : 반복 상태에 대한 값이 담겨 있는 객체
							- index : 0부터 시작하는 순서에 대한 번호
							- count : 1부터 시작하는 순서에 대한 번호
							- current : 반복하는 현재 요소
							- first : 첫번째 반복인지 체크
							- last : 반복의 마지막인지 체크
	
6) <c:forTokens>
	- java.util.StringTokenizer
	- items : EL식 문자열, 문자열
	- delims : 문자열에 포함된 구문 문자
	- var
	
7) <c:catch>
	
	<c:catch var="에러객체 속성">
		// 에러가 발생할 수 있을 가능성이 있는 코드
	</c:catch>

8) <c:redirect>
	HttpServletRequest
		.sendRedirect("주소"); -> 응답 헤더 : Location: 주소
		
	- url : 주소
	- <c:param name="이름" value="값" /> - 쿼리스트링 값으로 추가
	
	?이름=값 : 쿼리스트링

9) <c:import>

	<jsp:include page="..." /> 와 비슷, 차이점은 - 동일 서버의 자원만 버퍼에 추가(jsp, servlet, txt, html)
	<c:import>는 외부 서버 자원도 버퍼에 추가 가능
	- 요청 처리 중에 버퍼에 추가
	- 요청 데이터를 버퍼에 담는 과정중에 추가
		<c:param name="..." value="..." />
	
	- url : 해당 주소의 출력 결과물이 버퍼에 담겨 출력
	- var : 출력 버퍼의 내용을 EL식 변수에 담을 수 있다.
	
	참고)
		<%@ include file="..." %> : 물리적으로 번역될때 출력 결과물이 추가

10) <c:url>
	-> 변경될 수 있는 컨택스트 경로를 알아서 추가
	- var : 컨택스트 경로가 추가된 경로를 EL식 변수에 담는다.

11) <c:out>
	EL식으로 바로 출력 -> HTML 태그가 브라우저에서 해석되고 출력
	<c:out>으로 출력 -> HTML 태그는 문자열로 출력
	- escapeXml : 기본값은 true, false -> HTML로 해석
	- default : value값이 null인 경우 기본값으로 대체

3. 포매팅(fmt) 라이브러리
	- 형식화 관련 라이브러리
	- 날짜, 시간 형식, 숫자 형식, 메세지(다국어), 시간대
	
<%@ taglib prefix="fmt" uri="jakarta.tags.fmt" %>
1) fmt:formatDate
	- java.text.SimpleDateFormat
	- java.util.Date
	
	- value : date 객체를 El식 속성
	- type : date - 날짜만 표기 (기본값)
					 time - 시간만 표기
					 both - 날짜와 시간을 표기
	- dateStyle : full|long|short
	- timeStyle : full|long|short
	- pattern : 직접 패턴을 지정
	
2) fmt:formatNumber
	숫자 형식화
	java.text.DecimalForamt
	
	- value : 숫자 -> 형식화
	- groupingUsed : true - 기본값(세자리 마다)
									 false - 숫자만 출력
	- pattern
			- # : #,###.####
					ex) 10000.12 -> 10,000.12
			- 0 : 0,000.0000
					ex) 10000.12 -> 10,000.1200
	
	- type
			: currency - 통화 / <fmt:setLocale
			: percent - 백분률 / 소수점
	
3) fmt:setLocale
	java.util.Locale
		-> HttpServletRequest request
				- getLocale
				
	<fmt:setLocale value="국가코드_언어코드" />
	<fmt:setLocale value="언어코드" />
	
	<fmt:setLocale value="us_en" />
	<fmt:setLocale value="en" />
				
4) fmt:timeZone과 fmt:setTimeZone
	- 시간대 변경
	
	<fmt:timeZone value="zone id..">
		.. 날짜, 시간
	</fmt:timeZone>

5) fmt:setBundle과 fmt:bundle
	- 메세지 기능
	- 클래스패스/메세지파일명.properties
					/메세지파일명_en.properties : 브라우저 언어 설정이 영어 / <fmt:setLocale value="en" />
	- java.util.ResourceBundle
	
	- basename="경로.파일명"
	- <fmt:message key="메세지 코드" />
			java.text.MessageFormat
	
	참고)
		properties 파일 - 주로 설정
		키=값
		키=값
		
		# 주석
	
6) fmt:requestEncoding
	request.setCharacterEncoding(...);
	POST 형식 데이터
	servlet 6.0 : tomcat 10
	
	
	servlet 4.0 : tomcat 9

4. 함수(functions) 라이브러리
	- 문자열을 가공하는 라이브러리
	- 태그를 사용하지 않고 EL식 변수 내에서 사용 가능
	<%@ taglib prefix="fn" uri="jakarta.tags.functions" %>