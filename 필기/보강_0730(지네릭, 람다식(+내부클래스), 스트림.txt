0730 보강

지네릭스
Object : 다양한 자료형을 사용

1. 지네릭스란?
	1) 타입 안정성에 대한 확보
	2) 형변환의 번거로움 X
	
	타입을 명시함으로써
	
2. 지네릭 클래스의 선언

3. 지네릭스의 용어
1) 지네릭 클래스
	class Box<T> {...}
2) 타입변수 T
3) 원시타입 Box

- 타입 매개변수는 문법적 오류 -> 컴파일시 제거 -> 자료형은 Object 대체
- 객체를 생성하는 시점에 타입이 결정 <Apple> -> Apple로 객체를 만드는 시점에 형변환
	
------------------------ T는 올바른 형식이 아니어서 컴파일 할때는 Object로 변경
public class Box {
    private Object item;

    public void setItem(Object item) {
        this.item = item;
    }

    public Object getItem() {
        return item;
    }
}
---------------------------------------------------------------

사용의 제한점)
	static 멤버 변수에는 타입 매개변수 사용 불가
		- 정적 변수는 객체 생성과 관련없이 처음부터 변수 공간을 할당
		- 변수 공간을 할당 하려면 반드시 자료형이 결정 되어야 한다.
	배열 생성 불가
		- new 연산자는 배열의 공간을 생성하는 역할 : 명확하게 자료형을 알아야 공간을 생성
		
	=> 제네릭 타입은 객체가 만들어질때만 공간이 할당되기 때문에 static 멤버 변수와 배열은 생성, 사용 불가
	
	
4. 지네릭스의 제한
1) 타입 매개변수와 동일한 자료형
2) static멤버에 타입 변수 T를 사용할 수 없다.
3) 지네릭 타입의 배열을 생성하는 것도 허용하지 않는다.

5. 지네릭 클래스의 객체 생성과 사용
6. 제한된 지네릭 클래스
	<T extends 타입> : T는 타입과 동일 클래스 또는 하위 클래스 : 상한 제한
	<T extends 타입1 & 타입2> 타입1의 동일 또는 하위 클래스 + 타입2의 인터페이스 구현
	
7. 와일드 카드 : 지네릭 메서드
	<?> : <? extends Object>
	<? extends 타입> : 상한 제한 : ? - 타입과 타입의 하위 클래스
	<? super 타입> : 하한 제한 : ? - 타입과 타입의 상위 클래스
8. 지네릭 메서드
	- 타입이 결정되는 시점 : 메서드가 호출될 때
	
9. 지네릭 타입의 제거


? extends T -> T, T의 하위클래스
							 Fruit, Apple, Grape
							 
? super Apple : Apple, Fruit

? super Grape : Grape, Fruit


--------------------------------------------------------------

내부 클래스
- 클래스 안에 클래스가 정의

1. 인스턴스 내부 클래스
	- 인스턴스 변수, 인스턴스 메서드와 유사한 성격
	
2. 정적 내부 클래스
	- static
	- 정적 변수, 정적 메서드와 유사한 성격
	- 외부 클래스의 객체 생성과 상관 없이 객체를 생성할 수 있는 클래스
	- 일반 클래스와 거의 동일
	
	
	참고)
		정적 메서드와 인스턴스 메서드의 차이점
		
		정적 메서드는 인스턴스 메서드와 다르게 this라는 지역 변수 X
		-> 객체 생성과 관련 없기 때문
		-> 인스턴스 자원은 접근 불가(인스턴스 변수, 인스턴스 메서드 접근 불가)
		-> 정적 자원만 접근 가능(정적 메서드, 정적 변수)
	
3. 지역 내부 클래스
	- 함수 내부에서 정의된 클래스
	
	
	
	참고)
		- 인터페이스와 추상클래스가 객체가 되는 조건
			1) 상황 : 지역 내부에서 생성, 멤버 변수일때도 가능
			2) 미구현된 메서드를 정의함으로써 객체가 될 수 있음


람다식(Lambda expression)

1. 람다식이란?
	- 메서드(함수)를 하나의 식으로 표현
	
	- 함수형 프로그래밍
		- 함수란?
			- 하나의 기능(단일기능)
			
		- 함수는 값으로 사용
			- 매개변수
			- 반환값
			
	자바의 함수는 - 실행문 형태의 함수 : 값으로 사용 불가
		-> 인터페이스의 객체가 되는 조건 -> 람다식을 구현
		-> 객체는 값 -> 매개변수 가능, 반환값 가능
	
2. 람다식 문법 살펴보기
	-> 인터페이스의 객체가 되는 조건은 식 형태로 짧게 표현
	
	1) 인터페이스명, 반환값 타입, 함수명 생략
	2) 매개변수의 자료형 생략
	3) 구현코드 부분이 1줄이면 중괄호({ .. }) 생략, 반환값 타입은 메서드 정의를 통해 알 수 있으므로 return 예약어도 생략
	4) 용도가 다른 메서드 내부에서 호출되는 제한적이므로 매개변수도 1자로 주로 표현 (ex. a, b)
	5) 매개변수가 1개 -> (...) 생략 가능
	6) 매개변수가 없을땐 -> (...) 생략 불가
	
3. 람다식 사용하기
4. 함수형 인터페이스(Functional Interface)
@FunctionalInterface
	- 인터페이스 형식에 여러 추상 메서드를 정의해도 문법적 오류 X
	- 람다식으로 사용될 인터페이스는 함수형 프로그래밍을 구현하므로 단일 기능으로써 1개의 추상 메서드만 정의
	- 형식 제한을 위한 목적
