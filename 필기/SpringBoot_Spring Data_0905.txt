Spring Data : 추상화(공통)
Spring Data JPA

1. JPA란?
1) JPA(Jave Persistence API')는 자바 ORM 기술에 대한 API 표준입니다.
2) ORM이란 'Objea Relational Mapping'의 약자로 객체와 관계형 데이터베이스를 매핑해주는 것을 말합니다.

2. 영속성 컨텍스트 : 변화 감지 메모리	// 캐시 역할도 함
Persistence  - 영속성 컨텍스트 
- 상태변화 감지 메모리 영역 
- 처음 추가된 상태 -> INSERT 쿼리 
- 기존 엔티티에서 변경 -> UPDATE 쿼리 
- 제거 상태로 변경 -> DELETE 
- EntityManager : 영속성 관리 객체 : 스프링이 관리하는 객체 등록되어 있다(bean)
		- void persist(엔티티 객체)  -> 엔티티 영속 상태 -> 엔티티의 변화 감지
		- void flush() : 변화 상태 -> DB에 반영 
		- void detach() : 영속성 분리 -> 엔티티의 변화 감지 X
		- void merge() : 분리상태 엔티티 -> 영속 상태 : 엔티티의 변화 감지 O
		- void clear() : 영속성 상태 있는 엔티티를 모두 비우기
		- void close() : 영속성 메모리 제거
		- void remove() : 영속성 상태 -> 제거 상태 (변화 감지 상태) : DELETE 쿼리
		
ddl-auto : 테이블, 인덱스, 제약조건 
	create : 서버가 시작되면 기존 테이블, 인덱스, 제약조건 DROP -> 다시 테이블, 인덱스, 제약조건 생성
	create-drop : create + 서버가 종료 될때도 기존 테이블, 인덱스, 제약조건 DROP
	update : 테이블 DROP X -> 변경사항만 반영(컬럼 삭제 X, 추가, 변경 O)
	validate : 테이블 DROP X, 변경 사항 -> 오류 발생 
	none: 아무것도 X
	
	개발 시 : create - 개발 초창기
				update - 개발 중기
				
	실 서버 : validate, none


JPQL  : Java Persistence Query Language 
		- 엔티티 기준의 쿼리, 조회 결과 -> 영속 상태 

3. Entity 설계하기
1) 엔티티 매핑 관련 애노테이션
	
	@GeneratedValue 
		- 자동 증감번호
		- DBMS : 자동 증감번호 생성 전략에 차이 
			mysql : PRIMARY KEY + AUTO_INCREMENT : 시스템에서 알아서 생성 
			oracle : 시퀀스 객체 
		- 테이블 
		
	@Lob : Large Object
			: text필드와 매칭
		

2) 공통속성화
	- 상속 
	- @MappedSuperclass  => 상위클래스

3) 기본키(Primary Key) 여러개 조합해서 생성
@IdClass

- 기본 생성자, 멤버 변수를 초기화 하는 생성자
- equals() and hashcode() => Lombok : @NoArgConstructor @AllArgsConstructor

4. Repository 설계하기
JpaRepository 인터페이스를 상속 -> 구현 객체가 자동 생성

Optional<S> findById(...)
List<S> findAll(...)
S save(S entity) : EntityManager::persist(...)
S saveAndFlush(S entity) : -> save() + flush()
List<S> saveAll(Collection<S> entity) : 
List<S> saveAllAndFlush(Collection<S> entity)
void delete(S entity) : EntityManager::remove(...)
long count(...)
void flush()

5. 쿼리 메서드
	
Pageable 인터페이스
	-> PageRequest 

6. @Query 애노테이션

7. Querydsl		// SELECT 문에 특화
- : 비표준
- 조회 쿼리 관련 쿼리빌딩 라이브러리 제공
- Querydsl JPA 	// https://mvnrepository.com/artifact/com.querydsl/querydsl-jpa/5.0.0
- Querydsl APT	// https://mvnrepository.com/artifact/com.querydsl/querydsl-apt/5.0.0
	- Q엔티티명.java : 자동 생성 클래스
-------------------------------------------
<dependency>
	<groupId>com.querydsl</groupId>
	<artifactId>querydsl-jpa</artifactId>
	<version>5.0.0</version>
	<classifier>jakarta</classifier>	// 추가
</dependency>
<dependency>
	<groupId>com.querydsl</groupId>
	<artifactId>querydsl-apt</artifactId>
	<version>5.0.0</version>
	<classifier>jakarta</classifier>	// 추가
</dependency>
-------------------------------------------

논리 연산자
BooleanBuilder --> Predicate 인터페이스의 구현체
	and(Predicate ...)
	or(Predicate ...)
	not(Predicate ...)

8. 연관 관계 매핑
1) @ManyToOne
	- 다대일
	- 게시글(Many) - 회원(One)
	- Many쪽 테이블(엔티티)에 외래키가 등록
	
	- 외래키 : 엔티티명+기본키
	@JoinColumn(name="외래키명") -> 외래키명 설정
	
2) @OneToMany  // 회원쪽에서 본인이 작성한 게시글만 조회
	- 일대다
	- 회원(One) - 게시글(Many)
	
	연관 관계의 주인을 명시해야 함
		- Many쪽이 관계의 주인
		- 외래키가 있는 쪽
		- 데이터 수정, 변경 가능

3) @OneToOne
4) @ManyToMany

9. 영속성 전이

10. 지연로딩


-----------------------------
H2 DataBase : 연습용 DB