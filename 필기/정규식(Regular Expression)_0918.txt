정규 표현식
java.util.regex
	Pattern
	Matcher
	

[...] 문자 클래스 : 문자 1개
[bd] : 문자가 b, d가 포함되어 있으면
[a-z] : 소문자 알파벳이 포함되어 있는지 여부 (범위 설정)
[0-9] : 숫자가 포함되어 있는지 여부 == \d
[^a-z] : 소문자 알파벳을 제외한 문자
[^0-9] : 숫자가 아닌 문자 포함된 패턴 == \D

\d : [0-9]
\D : [^0-9]
\s : 공백 문자 1개
\S : 공백이 아닌 문자 1개 [^\s]

\w : [a-zA-Z0-9_] 
\W : [^a-zA-Z0-9_]
\b : 단어의 경계

패턴{숫자} -> 패턴이 숫자만큼 반복되는지 체크

패턴+ - 앞의 패턴을 1번 이상 반복 : 패턴{1,} == 1개 이상의 패턴이 반복	 // 최대한의 매칭
패턴? - 있어도 되고 없어도 되는 패턴 : 패턴{0,1} == 0개 이상 1개 이하
패턴* - 0개 이상 반복되는 패턴 : 패턴{0,}  // 최소한의 매칭

(패턴) : 패턴 그룹화(부분 정규화 -> 부분 패턴의 문자열 추출)

. : 문자 1개(줄 개행 문자(\n)를 포함하지 X)

^ : 시작하는 패턴
	참고) 문자 클래스 패턴 [^...] -> 제외한 문자
& : 끝나는 패턴


참고) 
자바스크립트
/패턴/플래그 -> 정규 표현식 객체

	.test(문자열) : 패턴 체크 (true, false)
	.exec(문자열) : 문자열 추출
	
플래그
i : CASE_INCENSITIVE - 대소문자 구분 없이
g : GLOBAL
		- 자바스크립트는 패턴 매칭을 1번만 하는데, 전체 문자열에 적용할때는 g
m : MULTIPLE - 여러줄

---------------------------------------------------------

const html = document.body.innerHTML;

const pattern = /<h4.*class=['"]?channel['"]?.*>([^<]*)<span/igm;

for (let i=0; i<100; i++) {
    const m = pattern.exec(html);
    console.log(m[1]);
}

---------------------------------------------------------

const html = document.body.innerHTML;

const pattern = /<div.*class=['"]?cjs_news_mw['"]?[^>]*>[^<]*<img.*src=['"]?([^'">]*)['"]?/igm;

for (let i=0; i<100; i++) {
    const m = pattern.exec(html);
    if (!m) break;
    console.log(m[1]);
}

---------------------------------------------------------



TDD(Test-Driven Development)

JUnit5 : 단위테스트 
	
	참고)
		단위 테스트 : 기능 단위 대한 테스트 (메서드)
							기능 : service 
								예) JoinService
								
		통합 테스트 : MockMvc
	
1. 의존설정
	- junit-jupiter
	- maven-surefire-plugin
	
2. @Test 애노테이션과 테스트 메서드
	- 각 메서드 : 테스트 단위 / @Test 애노테이션으로 지정
	- 테스트의 종류를 쉽게 파악할수 있는 메서드명
	
3. 주요 단언 메서드
	- 예상되는 값이 나오는지
	- 예상되는 예외가 발생하는지 
	- 예상하는 값이 true, false

참고)
TDD 기본 원칙 
	- 가장 쉬운 테스트  -> 어려운 테스트  -> 기능 완성 
	- 테스트가 주목적 X, 설계 O, 부가적으로 테스트가 이뤄진다.
	
	- 테스트 케이스(: 설계) -> 테스트를 통과시키기 위해서 기능 구현 -> 지속적인 리팩토링 -> 테스트 통과
	
4. 테스트 라이프사이클
1) @BeforeEach 
2) @AfterEach
3) @BeforeAll
4) @AfterAll

5. @DisplayName, @Disabled
@DisplayName : 단위 테스트에 대한 설명
	- 클래스명 위 
	- 단위 테스트 메서드 위

6. 모든 테스트 실행하기

7. @TempDir
8. @Timeout 