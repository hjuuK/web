스프링 DI 설정 및 사용
1. 스프링을 이용한 객체 조립과 사용
2. DI 방식 1 : 생성자 방식
3. DI 방식 2 : 세터 메서드 방식
4. @Configuration
5. @Bean
		- getBean
		
6. 두 개 이상의 설정 파일 사용하기
1) 생성자 매개변수
2) @Import	⭐⭐


의존 자동 주입 ⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
1. @Autowired
	1) 멤버 변수 위에 입력
	2) setter 메서드 : 의존성을 주입, 호출
	3) Optional 멤버 변수, setter 메서드의 매개변수
	4) @Autowired 애노테이션을 사용하지 않고 자동 주입  ⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
		: 컴포넌트 스캔
		: 생성자 매개변수에 의존 객체를 정의 -> 조건: 기본 생성자가 없어야 됨
		: Lombok - @RequiredArgsConstructor
								: 초기화가 반드시 필요한 멤버 변수만 생성자 매개변수에 추가
								참고) 초기화가 반드시 필요한 멤버 변수
										초기값이 없는 final 멤버 변수
										@NonNull 멤버 변수


	참고)
		class Optional<T> {
			...
			private final T value;
			...
		}

2. 일차하는 빈이 없는 경우
3. @Qualifier
	- 의존성 주입을 할 스프링 빈의 이름을 명시

4. 빈 이름과 기본 한정자

5. @Autowired 애노테이션의 필수 여부
	required=false : 의존하고 있는 객체가 스프링 컨테이너에 없으면 메서드 호출 X
	
	@Nullable : setter 메서드는 호출, 의존하는 객체가 없으면 null을 주입

컴포넌트 스캔
- 지정된 특정 패키지의 범위의 특정 애노테이션의 정의된 클래스를 자동 빈으로 생성

1. @Component
2. @ComponentScan

3. 기본 스캔 대상 - 암기 !! ⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐
@Component
@Service
@Inject

------------------------
@Configuration
@Controller
@RestController
@Repository
@ControllerAdvice
@RestControllerAdvice
@Aspect

4. 컴포넌트 스캔에 따른 충돌 처리
- 빈의 이름 클래스명에서 앞자만 소문자 (패키지명은 고려 X)
ex) JoinService -> joinService

1) 빈 이름 충돌
	- 기본 스캔 대상 애노테이션에 value 속성에 빈의 이름을 직접 지정하면 충돌 X
	
2) 수동 등록한 빈과 충돌
	- 수동 등록한 빈이 우선
	
3) excludeFilters
		FilterType
			.ANNOTATION : 특정 애노테이션이 있는 클래스는 스캔범위에서 제외(기본값)
			.ASSIGNAbLE_TYPE : 특정 클래스, 인터페이스 ...
			.ASPECTJ : ANT 패턴 - aspectjweaver (https://mvnrepository.com/artifact/org.aspectj/aspectjweaver/1.9.20  // <scope>runtime</scope> -> 제거)
			.REGEX : 정규표현식 패턴


빈 라이프 사이클과 범위
1. 컨테이너 초기화 : 빈 객체의 생성, 의존 주입, 초기화

2. 컨테이너 종료 : 빈 객체의 소멸

3. 빈 객체의 라이프 사이클
1) 객체 생성 -> 의존 설정 -> 초기화 -> 소멸

2) InitializingBean 인터페이스		// 설정에 대한 인터페이스
			- afterPropertiesSet(...) : 초기화 단계에서 호출 
			
3) DisposableBean 인터페이스 
			- destroy() : 소멸 단계 전에 호출
				- 자원해제에 대한 처리를 주로 정의 (ex. DB)
				
-> 직접 정의한 클래스에서만 사용 가능

4. 빈 객체의 초기화와 소멸 : 커스텀 메서드
@Bea
1) initMethod
2) destroyMethod

5. 빈 객체의 생성과 관리 범위
- 싱글턴 : 기본  -> 메모리 낭비 X
@Scope
	- singleton : 기본값
	- prototype : 객체를 조회할 떄마다 새로운 객체를 생성
	
	
------------------------------------------------------

0821 정리

1. 의존성 자동 주입 - @Autowired
1) 멤버 변수
2) setter 메서드 -> 의존성 해결
3) Optional 

4) @Autowired 애노테이션을 사용하지 않고 의존성 주입
- 컴포넌트 스캔으로 자동 빈 생성
- 생성자 매개변수 + 기본 생성자는 있으면 안됨
- Lombok::@RequiredArgsConstructor
	- 멤버 변수가 final이고 초기화가 안되는 경우
	- @NonNull 사용
	
	
기본 스캔 범위 애노테이션
@Component
@Service
@inject

@Configuration
@Controller
@RestController
@Repository
@ControllerAdvice
@RestControllerAdvice
@Aspect